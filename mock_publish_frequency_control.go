// Code generated by MockGen. DO NOT EDIT.
// Source: publish_frequency_control.go
//
// Generated by this command:
//
//	mockgen -source=publish_frequency_control.go -destination=mock_publish_frequency_control.go -package=main
//

// Package main is a generated GoMock package.
package main

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockPublisherController is a mock of PublisherController interface.
type MockPublisherController struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherControllerMockRecorder
	isgomock struct{}
}

// MockPublisherControllerMockRecorder is the mock recorder for MockPublisherController.
type MockPublisherControllerMockRecorder struct {
	mock *MockPublisherController
}

// NewMockPublisherController creates a new mock instance.
func NewMockPublisherController(ctrl *gomock.Controller) *MockPublisherController {
	mock := &MockPublisherController{ctrl: ctrl}
	mock.recorder = &MockPublisherControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublisherController) EXPECT() *MockPublisherControllerMockRecorder {
	return m.recorder
}

// CanPublish mocks base method.
func (m *MockPublisherController) CanPublish(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanPublish", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CanPublish indicates an expected call of CanPublish.
func (mr *MockPublisherControllerMockRecorder) CanPublish(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanPublish", reflect.TypeOf((*MockPublisherController)(nil).CanPublish), ctx)
}

// MockTimeProvider is a mock of TimeProvider interface.
type MockTimeProvider struct {
	ctrl     *gomock.Controller
	recorder *MockTimeProviderMockRecorder
	isgomock struct{}
}

// MockTimeProviderMockRecorder is the mock recorder for MockTimeProvider.
type MockTimeProviderMockRecorder struct {
	mock *MockTimeProvider
}

// NewMockTimeProvider creates a new mock instance.
func NewMockTimeProvider(ctrl *gomock.Controller) *MockTimeProvider {
	mock := &MockTimeProvider{ctrl: ctrl}
	mock.recorder = &MockTimeProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimeProvider) EXPECT() *MockTimeProviderMockRecorder {
	return m.recorder
}

// Now mocks base method.
func (m *MockTimeProvider) Now() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockTimeProviderMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockTimeProvider)(nil).Now))
}

// MockRandProvider is a mock of RandProvider interface.
type MockRandProvider struct {
	ctrl     *gomock.Controller
	recorder *MockRandProviderMockRecorder
	isgomock struct{}
}

// MockRandProviderMockRecorder is the mock recorder for MockRandProvider.
type MockRandProviderMockRecorder struct {
	mock *MockRandProvider
}

// NewMockRandProvider creates a new mock instance.
func NewMockRandProvider(ctrl *gomock.Controller) *MockRandProvider {
	mock := &MockRandProvider{ctrl: ctrl}
	mock.recorder = &MockRandProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRandProvider) EXPECT() *MockRandProviderMockRecorder {
	return m.recorder
}

// Float64 mocks base method.
func (m *MockRandProvider) Float64() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Float64")
	ret0, _ := ret[0].(float64)
	return ret0
}

// Float64 indicates an expected call of Float64.
func (mr *MockRandProviderMockRecorder) Float64() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Float64", reflect.TypeOf((*MockRandProvider)(nil).Float64))
}

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
	isgomock struct{}
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Printf mocks base method.
func (m *MockLogger) Printf(format string, v ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Printf", varargs...)
}

// Printf indicates an expected call of Printf.
func (mr *MockLoggerMockRecorder) Printf(format any, v ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Printf", reflect.TypeOf((*MockLogger)(nil).Printf), varargs...)
}
